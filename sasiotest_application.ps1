<#
.SYNOPSIS
SAS IO Test Package Script

Written by Chris Vincent

.DESCRIPTION
This script calls the SASIOTEST utility, a tool for determining the throughput of filesystem target for SAS datasets. 

This script sends the console output of the utility to a text file for later processing.

The ETL_NETWORK_PROBLEMS.sas SAS program compliments this script. 
    ETL_NETWORK_PROBLEMS.sas warehouses the data within the logs generated by runs of this script.

This script may be scheduled to run at regular intervals in order to develop a performance profile of a network connection.

The SASIOTEST utlity is documented at http://support.sas.com/kb/51/659.html

.PARAMETER test_read
Default value: Y. Override to N to skip write checking. 

.PARAMETER dset_base_path
Test dataset destination path. You must create this path if it does not exist. Default is "N:\SASIOTEST Logs".

.PARAMETER instances_of_tool
Number of concurrent tests to run. Default is 1. 

.PARAMETER page_size
Default page size (in kb) for I/O operations. Specify an integer value. Default is 8.  

.PARAMETER tool_path
Full path to the SASIOTEST executable. Default is "C:\Program Files\SASHome\SASFoundation\9.4\sasiotest.exe"

.PARAMETER file_size
Size of output file(s) in GB. Default is 1.

#>

param (
[string]$test_read ="Y",
[string]$dset_base_path = "N:\SASIOTEST Logs",
[int]$instances_of_tool= 1,
[int]$page_size = 8, 
[string]$tool_path = "C:\Program Files\SASHome\SASFoundation\9.4\sasiotest.exe",
[int]$file_size = 1
)

$global:is_running = "not null"

function SleepforTen {
    Start-Sleep -s 10
                     }

function CheckProcesses {
    $global:is_running = get-process | Where-Object {$_.ProcessName -eq "sasiotest"}
                        }


function ArrangeDateStamp { 
  $DateObjInst = Get-Date

    
    $DayOfWeek = $DateObjInst.DayOfWeek
    $Day = $DateObjInst.Day
    $Mon = $DateObjInst.Month
    $Year = $DateObjInst.Year
    $Hour = $DateObjInst.Hour
    $Min =$DateObjInst.Minute
    $Sec = $DateObjInst.Second

    $global:date_prefix = "$DayOfWeek.$Mon$Day$Year`_$Hour$Min$Sec"

                            }

function InstantiateJobs {
    
    param (
        [string]$read_or_write_option
            )
                                

    for ($this_tool_instance=1; $this_tool_instance -le $instances_of_tool; $this_tool_instance++)

    {  
        $this_arg = "`"$dset_base_path\`dset_$env:COMPUTERNAME`_$this_tool_instance.dat`" -$read_or_write_option -filesize $file_size`g -pagesize $page_size`k" 

        New-Variable -Name "sasio_instance$this_tool_instance" -Value (
            Start-Process -FilePath $tool_path -ArgumentList $this_arg -NoNewWindow -PassThru -RedirectStandardOutput $dset_base_path\`IO_test_$read_or_write_option`_instance_number_$this_tool_instance`_of_$instances_of_tool`_$date_prefix`_$env:COMPUTERNAME`_$env:USERNAME`_consoleout.txt                                              
                                                                    
                                                                        ) -Scope "Global"
    }
                            }

ArrangeDateStamp

InstantiateJobs -read_or_write_option "w"

do {
    SleepforTen
    CheckProcesses
    }
until ($is_running -eq $null)

if ($test_read -eq "Y") {

    InstantiateJobs -read_or_write_option "r"

    do {
            SleepforTen
            CheckProcesses
        }
    until ($is_running -eq $null)

                    }

Get-ChildItem -Path $dset_base_path\* -Include "*.dat" | Remove-Item -Force